/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, About as PrismaAbout } from "@prisma/client";

export class AboutServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AboutCountArgs, "select">): Promise<number> {
    return this.prisma.about.count(args);
  }

  async abouts<T extends Prisma.AboutFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AboutFindManyArgs>
  ): Promise<PrismaAbout[]> {
    return this.prisma.about.findMany<Prisma.AboutFindManyArgs>(args);
  }
  async about<T extends Prisma.AboutFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AboutFindUniqueArgs>
  ): Promise<PrismaAbout | null> {
    return this.prisma.about.findUnique(args);
  }
  async createAbout<T extends Prisma.AboutCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AboutCreateArgs>
  ): Promise<PrismaAbout> {
    return this.prisma.about.create<T>(args);
  }
  async updateAbout<T extends Prisma.AboutUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AboutUpdateArgs>
  ): Promise<PrismaAbout> {
    return this.prisma.about.update<T>(args);
  }
  async deleteAbout<T extends Prisma.AboutDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AboutDeleteArgs>
  ): Promise<PrismaAbout> {
    return this.prisma.about.delete(args);
  }
}
